# Zurg configuration version
zurg: v1
token: YOUR_RD_API_TOKEN # https://real-debrid.com/apitoken

# when somebody asks for your zurg config, you copy from this point

# basic functionality
host: "[::]" # do not change this if you are running it inside a docker container
port: 9898 # do not change this if you are running it inside a docker container
concurrent_workers: 200
check_for_changes_every_secs: 15
# reliability configs
unrestrict_workers: 10 # since unrestricting has a different rate limit, use a different worker pool. decrease this if you are getting 429s
release_unrestrict_after_ms: 100 # wait time for every unrestrict worker to be released. increase this if you are getting 429s
rate_limit_sleep_secs: 6 # wait time after getting a 429 from Real-Debrid API
realdebrid_timeout_secs: 60 # api timeout
retries_until_failed: 5 # api failures until considered failed
# misc configs
enable_repair: true # BEWARE! THERE CAN ONLY BE 1 INSTANCE OF ZURG THAT SHOULD REPAIR YOUR TORRENTS
retain_folder_name_extension: false # if true, zurg won't modify the filenames from real-debrid
retain_rd_torrent_name: false # if true, it will strictly follow RD API returned torrent name which should make this more compatible with rdt-client
on_library_update: |
  for arg in "$@"
  do
      echo "detected update on: $arg"
  done
# network configs
network_buffer_size: 1048576 # 1 MiB
serve_from_rclone: false
force_ipv6: false
# preferred_hosts: # Run the script here https://github.com/debridmediamanager/real-debrid-network-test
#   - 20.download.real-debrid.com
#   - 21.download.real-debrid.com
#   - 22.download.real-debrid.com
#   - 23.download.real-debrid.com
#   - 30.download.real-debrid.com
#   - 31.download.real-debrid.com
#   - 32.download.real-debrid.com
#   - 34.download.real-debrid.com
#   - 40.download.real-debrid.com
# curl https://raw.githubusercontent.com/debridmediamanager/real-debrid-network-test/main/real-debrid-network-test.sh | bash

# List of directory definitions and their filtering rules
directories:
  # Configuration for anime shows
  anime:
    group: media # directories on different groups have duplicates of the same torrent
    group_order: 10 # group order = priority, it defines who eats first on a group
    filters:
      - and: # you can use nested 'and' & 'or' conditions
        - has_episodes: true # intelligent detection of episode files inside a torrent
        - any_file_inside_regex: /^\[/ # usually anime starts with [ e.g. [SubsPlease]
        - any_file_inside_not_regex: /s\d\de\d\d/i # and usually anime doesn't use SxxExx

  shows:
    group: media
    group_order: 20
    filters:
      - has_episodes: true  # intelligent detection of episode files inside a torrent

  movies:
    group: media  # because anime, shows and movies are in the same group,
    group_order: 30 # and anime and shows has a lower group_order number than movies, all torrents that doesn't fall into the previous 2 will fall into movies
    filters:
      - regex: /.*/ # you cannot leave a directory without filters because it will not have any torrents in it
